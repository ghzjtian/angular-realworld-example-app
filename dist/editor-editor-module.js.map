{"version":3,"sources":["webpack:///./src/app/editor/editable-article-resolver.service.ts","webpack:///./src/app/editor/editor-routing.module.ts","webpack:///./src/app/editor/editor.component.html","webpack:///./src/app/editor/editor.component.ts","webpack:///./src/app/editor/editor.module.ts"],"names":[],"mappings":"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","file":"editor-editor-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Article, ArticlesService, UserService } from '../core';\nimport { catchError ,  map } from 'rxjs/operators';\n\n@Injectable()\nexport class EditableArticleResolver implements Resolve<Article> {\n  constructor(\n    private articlesService: ArticlesService,\n    private router: Router,\n    private userService: UserService\n  ) { }\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any> {\n\n    return this.articlesService.get(route.params['slug'])\n      .pipe(\n        map(\n          article => {\n            if (this.userService.getCurrentUser().username === article.author.username) {\n              return article;\n            } else {\n              this.router.navigateByUrl('/');\n            }\n          }\n        ),\n        catchError((err) => this.router.navigateByUrl('/'))\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EditorComponent } from './editor.component';\nimport { EditableArticleResolver } from './editable-article-resolver.service';\nimport { AuthGuard } from '../core';\nimport { SharedModule } from '../shared';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EditorComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: ':slug',\n    component: EditorComponent,\n    canActivate: [AuthGuard],\n    resolve: {\n      article: EditableArticleResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EditorRoutingModule {}\n","module.exports = \"<div class=\\\"editor-page\\\">\\n  <div class=\\\"container page\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-10 offset-md-1 col-xs-12\\\">\\n\\n        <app-list-errors [errors]=\\\"errors\\\"></app-list-errors>\\n\\n        <form [formGroup]=\\\"articleForm\\\">\\n          <fieldset [disabled]=\\\"isSubmitting\\\">\\n\\n            <fieldset class=\\\"form-group\\\">\\n              <input class=\\\"form-control form-control-lg\\\"\\n                formControlName=\\\"title\\\"\\n                type=\\\"text\\\"\\n                placeholder=\\\"Article Title\\\" />\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n              <input class=\\\"form-control\\\"\\n                formControlName=\\\"description\\\"\\n                type=\\\"text\\\"\\n                placeholder=\\\"What's this article about?\\\" />\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n              <textarea class=\\\"form-control\\\"\\n                formControlName=\\\"body\\\"\\n                rows=\\\"8\\\"\\n                placeholder=\\\"Write your article (in markdown)\\\">\\n              </textarea>\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n              <input class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                placeholder=\\\"Enter tags\\\"\\n                [formControl]=\\\"tagField\\\"\\n                (keyup.enter)=\\\"addTag()\\\" />\\n\\n              <div class=\\\"tag-list\\\">\\n                <span *ngFor=\\\"let tag of article.tagList\\\"\\n                  class=\\\"tag-default tag-pill\\\">\\n                  <i class=\\\"ion-close-round\\\" (click)=\\\"removeTag(tag)\\\"></i>\\n                  {{ tag }}\\n                </span>\\n              </div>\\n            </fieldset>\\n\\n            <button class=\\\"btn btn-lg pull-xs-right btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitForm()\\\">\\n              Publish Article\\n            </button>\\n\\n          </fieldset>\\n        </form>\\n\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Article, ArticlesService } from '../core';\n\n@Component({\n  selector: 'app-editor-page',\n  templateUrl: './editor.component.html'\n})\nexport class EditorComponent implements OnInit {\n  article: Article = {} as Article;\n  articleForm: FormGroup;\n  tagField = new FormControl();\n  errors: Object = {};\n  isSubmitting = false;\n\n  constructor(\n    private articlesService: ArticlesService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private fb: FormBuilder\n  ) {\n    // use the FormBuilder to create a form group\n    this.articleForm = this.fb.group({\n      title: '',\n      description: '',\n      body: ''\n    });\n\n    // Initialized tagList as empty array\n    this.article.tagList = [];\n\n    // Optional: subscribe to value changes on the form\n    // this.articleForm.valueChanges.subscribe(value => this.updateArticle(value));\n  }\n\n  ngOnInit() {\n    // If there's an article prefetched, load it\n    this.route.data.subscribe((data: { article: Article }) => {\n      if (data.article) {\n        this.article = data.article;\n        this.articleForm.patchValue(data.article);\n      }\n    });\n  }\n\n  addTag() {\n    // retrieve tag control\n    const tag = this.tagField.value;\n    // only add tag if it does not exist yet\n    if (this.article.tagList.indexOf(tag) < 0) {\n      this.article.tagList.push(tag);\n    }\n    // clear the input\n    this.tagField.reset('');\n  }\n\n  removeTag(tagName: string) {\n    this.article.tagList = this.article.tagList.filter(tag => tag !== tagName);\n  }\n\n  submitForm() {\n    this.isSubmitting = true;\n\n    // update the model\n    this.updateArticle(this.articleForm.value);\n\n    // post the changes\n    this.articlesService.save(this.article).subscribe(\n      article => this.router.navigateByUrl('/article/' + article.slug),\n      err => {\n        this.errors = err;\n        this.isSubmitting = false;\n      }\n    );\n  }\n\n  updateArticle(values: Object) {\n    Object.assign(this.article, values);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { EditorComponent } from './editor.component';\nimport { EditableArticleResolver } from './editable-article-resolver.service';\nimport { AuthGuard } from '../core';\nimport { SharedModule } from '../shared';\nimport { EditorRoutingModule } from './editor-routing.module';\n\n@NgModule({\n  imports: [SharedModule, EditorRoutingModule],\n  declarations: [EditorComponent],\n  providers: [EditableArticleResolver]\n})\nexport class EditorModule {}\n"],"sourceRoot":""}